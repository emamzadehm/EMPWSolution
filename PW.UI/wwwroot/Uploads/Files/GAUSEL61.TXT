> restart;
> # GAUSSIAN ELIMINATION WITH BACKWARD SUBSTITUTION ALGOTITHM 6.1
> #
> # To solve the n by n linear system
> #
> # E1:  A[1,1] X[1] + A[1,2] X[2] +...+ A[1,n] X[n] = A[1,n+1]
> # E2:  A[2,1] X[1] + A[2,2] X[2] +...+ A[2,n] X[n] = A[2,n+1]
> # :
> # .
> # EN:  A[n,1] X[1] + A[n,2] X[2] +...+ A[n,n] X[n] = A[n,n+1]
> #
> # INPUT:   number of unknowns and equations n; augmented
> #          matrix A = (A(I,J)) where 1<=I<=n and 1<=J<=n+1.
> #
> # OUTPUT:  solution x(1), x(2),...,x(n) or a message that the
> #          linear system has no unique solution.
> GAUSEL61 := proc() local AA, NAME, INP, OK, N, I, J, A, NN, M, ICHG, IP, JJ, C, XM, K, X, SUM, KK, FLAG, OUP;
> printf(`This is Gaussian Elimination to solve a linear system.\n`);
> printf(`The array will be input from a text file in the order:\n`);
> printf(`A(1,1), A(1,2), ..., A(1,N+1), A(2,1), A(2,2), ..., 
> A(2,N+1),\n`);
> printf(`..., A(N,1), A(N,2), ..., A(N,N+1)\n\n`);
> printf(`Place as many entries as desired on each line, but separate `);
> printf(`entries with\n`);
> printf(`at least one blank.\n\n\n`);
> printf(`Has the input file been created? - enter Y or N.\n`);
> AA := scanf(`%c`)[1];
> if AA = Y or AA = y then
> printf(`Input the file name in the form - drive:\\name.ext\n`);
> printf(`for example:   A:\\DATA.DTA\n`);
> NAME := scanf(`%s`)[1];
> INP := fopen(NAME,READ,TEXT);
> OK := FALSE;
> while OK = FALSE do
> printf(`Input the number of equations - an integer.\n`);
> N := scanf(`%d`)[1];
> if N > 0 then
> for I from 1 to N do
> for J from 1 to N+1 do
> A[I-1,J-1] := fscanf(INP, `%f`)[1];
> od;
> od;
> OK := TRUE;
> fclose(INP);
> else printf(`The number must be a positive integer.\n`);
> fi;
> od;
> else 
> printf(`The program will end so the input file can be created.\n`);
> fi;
> if OK = TRUE then
STEP 1
Elimination process
> NN := N-1;
> M := N+1;
> ICHG := 0;
> I := 1;
> while OK = TRUE and I <= NN do
STEP 2
use IP instead of p
> IP := I;
> while abs(A[IP-1,I-1]) <= 1.0e-20 and IP <= N do
> IP := IP+1;
> od;
> if IP = M then
> OK := FALSE;
> else
STEP 3
> if IP <> I then
> for JJ from 1 to M do
> C := A[I-1,JJ-1];
> A[I-1,JJ-1] := A[IP-1,JJ-1];
> A[IP-1,JJ-1] := C;
> od;
> ICHG := ICHG+1;
> fi;
STEP 4
> JJ := I+1;
> for J from JJ to N do
STEP 5
use XM in place of m(J,I)
> XM := A[J-1,I-1]/A[I-1,I-1];
STEP 6
> for K from JJ to M do
> A[J-1,K-1] := A[J-1,K-1] - XM * A[I-1,K-1];
> od;
Multiplier XM could be saved in A[J,I].
> A[J-1,I-1] := 0;
> od;
> fi;
> I := I+1;
> od;
> if OK = TRUE
> then
STEP 7
> if abs(A[N-1,N-1]) <= 1.0e-20 then
> OK := FALSE;
> else
STEP 8
start backward substitution
> X[N-1] := A[N-1,M-1] / A[N-1,N-1];
STEP 9
> for K from 1 to NN do
> I := NN-K+1;
> JJ := I+1;
> SUM := 0;
> for KK from JJ to N do
> SUM := SUM - A[I-1,KK-1] * X[KK-1];
> od;
> X[I-1] := (A[I-1,M-1]+SUM) / A[I-1,I-1];
> od;
STEP 10
procedure completed successfully
> printf(`Choice of output method:\n`);
> printf(`1. Output to screen\n`);
> printf(`2. Output to text file\n`);
> printf(`Please enter 1 or 2.\n`);
> FLAG := scanf(`%d`)[1];
> if FLAG = 2 then
> printf(`Input the file name in the form - drive:\\name.ext\n`);
> printf(`for example:  A:\\OUTPUT.DTA\n`);
> NAME := scanf(`%s`)[1];
> OUP := fopen(NAME, WRITE,TEXT);
> else
> OUP := default;
> fi;
> fprintf(OUP, `GAUSSIAN ELIMINATION\n\n`);
> fprintf(OUP, `The reduced system - output by rows:\n`);
> for I from 1 to N do
> for J from 1 to M do
> fprintf(OUP, ` %11.8f`, A[I-1,J-1]);
> od;
> fprintf(OUP, `\n`);
> od;
> fprintf(OUP, `\n\nHas solution vector:\n`);
> for I from 1 to N do
> fprintf(OUP, `  %12.8f`, X[I-1]);
> od;
> fprintf (OUP, `\n\nwith %d row interchange(s)\n`, ICHG);
> if OUP <> default then
> fclose(OUP):
> printf(`Output file %s created successfully`,NAME);
> fi;
> fi;
> fi;
> if OK = FALSE then
> printf(`System has no unique solution\n`);
> fi;
> fi;
> RETURN(0);
> end;
